# 数据源集合
dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3306/link?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai
    username: root
    password: 1234567890

#  如果有多个数据源的话直接ds_1
#  ds_1:
#    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
#    driverClassName: com.mysql.cj.jdbc.Driver
#    jdbcUrl: jdbc:mysql://127.0.0.1:3306/link?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai
#    username: root
#    password: 1234567890

rules:
  - !SHARDING
    tables:
      t_link:
        # 真实数据节点，比如数据库源以及数据库在数据库中真实存在的
        actualDataNodes: ds_0.t_link_${0..15}
#        # 分库策略
#        databaseStrategy:
#          standard:
#            shardingColumn: username
#            shardingAlgorithmName: user_database_hash_mod
        # 分表策略
        tableStrategy:
          # 用于单分片键的标准分片场景
          standard:
            # 分片键
            shardingColumn: gid
            # 分片算法，对应 rules[0].shardingAlgorithms
            shardingAlgorithmName: link_table_hash_mod
      t_link_goto:
        # 真实数据节点，比如数据库源以及数据库在数据库中真实存在的
        actualDataNodes: ds_0.t_link_goto_${0..15}
        #        # 分库策略
        #        databaseStrategy:
        #          standard:
        #            shardingColumn: username
        #            shardingAlgorithmName: user_database_hash_mod
        # 分表策略
        tableStrategy:
          # 用于单分片键的标准分片场景
          standard:
            # 分片键
            shardingColumn: full_short_url
            # 分片算法，对应 rules[0].shardingAlgorithms
            shardingAlgorithmName: link_goto_table_hash_mod

      t_link_stats_today:
        # 真实数据节点，比如数据库源以及数据库在数据库中真实存在的
        actualDataNodes: ds_0.t_link_stats_today_${0..15}
        #        # 分库策略
        #        databaseStrategy:
        #          standard:
        #            shardingColumn: username
        #            shardingAlgorithmName: user_database_hash_mod
        # 分表策略
        tableStrategy:
          # 用于单分片键的标准分片场景
          standard:
            # 分片键
            shardingColumn: gid
            # 分片算法，对应 rules[0].shardingAlgorithms
            shardingAlgorithmName: link_stats_today_table_hash_mod
#    绑定表
    bindingTables:
      - t_link, t_link_stats_today
    # 分片算法
    shardingAlgorithms:
      # 数据表分片算法
      link_table_hash_mod:
        # 根据分片键 Hash 分片
        type: HASH_MOD
        # 分片数量
        props:
          sharding-count: 16

      link_goto_table_hash_mod:
        # 根据分片键 Hash 分片
        type: HASH_MOD
        # 分片数量
        props:
          sharding-count: 16

      link_stats_today_table_hash_mod:
        # 根据分片键 Hash 分片
        type: HASH_MOD
        # 分片数量
        props:
          sharding-count: 16


#  # 数据加密存储规则
#  - !ENCRYPT
#    # 需要加密的表集合
#    tables:
#      # 用户表
#      t_user:
#        # 用户表中哪些字段需要进行加密
#        columns:
#          # 手机号字段，逻辑字段，不一定是在数据库中真实存在
#          phone:
#            # 手机号字段存储的密文字段，这个是数据库中真实存在的字段
#            cipherColumn: phone
#            # 身份证字段加密算法
#            encryptorName: common_encryptor
#          mail:
#            cipherColumn: mail
#            encryptorName: common_encryptor
#        # 是否按照密文字段查询
#        queryWithCipherColumn: true
#    # 加密算法
#    encryptors:
#      # 自定义加密算法名称
#      common_encryptor:
#        # 加密算法类型
#        type: AES
#        props:
#          # AES 加密密钥
#          aes-key-value: sikfqifcwwdjqcqfpq
# 展现逻辑 SQL & 真实 SQL
props:
  sql-show: true